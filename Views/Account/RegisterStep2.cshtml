@model TaskManagementMvc.Controllers.RegisterStep2ViewModel
@{
    ViewData["Title"] = "ثبت‌نام - مرحله ۲";
}
<style>
    :root { --bg: #f6f7fb; --card: #ffffff; }
    .auth-shell { min-height: 100vh; display: grid; place-items: center; padding: 24px; background: var(--bg); }
    .step-card { width: 100%; max-width: 700px; background: var(--card); border-radius: 16px; box-shadow: 0 6px 24px rgba(0,0,0,.08); overflow: hidden; }
    .step-header { padding: 16px 20px; background: #0d6efd; color: #fff; display: flex; align-items: center; gap: .5rem; }
    .step-header .title { font-size: 1.1rem; margin: 0; }
    .stepper { display: flex; justify-content: space-between; gap: 12px; padding: 16px 20px; background: #f0f4ff; }
    .stepper .node { flex: 1 1 0; display: flex; align-items: center; gap: 10px; opacity: .6; font-weight: 500; }
    .stepper .node.active { opacity: 1; }
    .stepper .dot { width: 28px; height: 28px; border-radius: 50%; background: #dbe5ff; color: #0d6efd; display: grid; place-items: center; font-weight: 700; }
    .stepper .node.active .dot { background: #0d6efd; color: #fff; }
    .step-body { padding: 20px; }
    .actions { display: flex; gap: 10px; justify-content: space-between; padding: 16px 20px; border-top: 1px solid #eee; background: #fafbff; }
    .actions .left, .actions .right { display: flex; gap: 10px; }
    .brand { text-align: center; color: #6c757d; margin-top: 10px; font-size: .9rem; }
    .strength { height: 6px; background: #e9ecef; border-radius: 6px; overflow: hidden; }
    .strength > div { height: 100%; width: 0; transition: width .25s ease; }
    .strength.low > div { background: #dc3545; }
    .strength.medium > div { background: #ffc107; }
    .strength.good > div { background: #0d6efd; }
    .strength.strong > div { background: #198754; }
</style>

<div class="auth-shell">
    <div class="step-card">
        <div class="step-header">
            <i class="bi bi-person-plus fs-5"></i>
            <h1 class="title">ثبت‌نام</h1>
        </div>

        <div class="stepper">
            <div class="node">
                <div class="dot">۱</div>
                <div>ایمیل</div>
            </div>
            <div class="node active">
                <div class="dot">۲</div>
                <div>رمز عبور</div>
            </div>
            <div class="node">
                <div class="dot">۳</div>
                <div>شرکت</div>
            </div>
        </div>

        <form id="registerStep2Form" asp-action="RegisterStep2" method="post" novalidate>
            @Html.AntiForgeryToken()
            <div class="step-body">
                <div asp-validation-summary="ModelOnly" class="text-danger small mb-2"></div>

                <div class="row g-3">
                    <div class="col-12 col-md-8 mx-auto">
                        <div class="corp-field mb-0">
                            <label asp-for="Password" class="form-label corp-label"></label>
                            <div class="input-group">
                                <input asp-for="Password" class="form-control corp-input" id="Password" />
                                <button class="btn btn-outline-secondary" type="button" id="togglePwd" tabindex="-1"><i class="bi bi-eye"></i></button>
                            </div>
                            <div id="pwStrength" class="strength mt-2"><div></div></div>
                            <ul id="pwPolicy" class="pw-policy">
                                <li data-rule="len">حداقل ۶ کاراکتر</li>
                                <li data-rule="lower">حرف کوچک</li>
                                <li data-rule="upper">حرف بزرگ</li>
                                <li data-rule="digit">عدد</li>
                            </ul>
                            <span asp-validation-for="Password" class="text-danger corp-validation"></span>
                        </div>

                        <div class="corp-field mt-3">
                            <label asp-for="ConfirmPassword" class="form-label corp-label"></label>
                            <div class="input-group">
                                <input asp-for="ConfirmPassword" class="form-control corp-input" id="ConfirmPassword" />
                                <button class="btn btn-outline-secondary" type="button" id="togglePwd2" tabindex="-1"><i class="bi bi-eye"></i></button>
                            </div>
                            <span asp-validation-for="ConfirmPassword" class="text-danger corp-validation"></span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="actions">
                <div class="left">
                    <a class="btn btn-light" asp-action="RegisterStep1">بازگشت</a>
                </div>
                <div class="right">
                    <button type="submit" class="btn btn-primary">ادامه</button>
                </div>
            </div>
        </form>
    </div>
    <div class="brand">© <span id="year"></span> TaskManagement</div>
</div>

@await Html.PartialAsync("_ValidationScriptsPartial")
<script>
    document.getElementById('year').textContent = new Date().getFullYear();
    (function(){
        function toggleVisibility(inputId, btnId) {
            const input = document.getElementById(inputId);
            const btn = document.getElementById(btnId);
            if (!input || !btn) return;
            btn.addEventListener('click', function(){
                const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                input.setAttribute('type', type);
                const icon = btn.querySelector('i');
                if (icon) icon.className = type === 'password' ? 'bi bi-eye' : 'bi bi-eye-slash';
            });
        }
        toggleVisibility('Password', 'togglePwd');
        toggleVisibility('ConfirmPassword', 'togglePwd2');

        const pwInput = document.getElementById('Password');
        const strength = document.getElementById('pwStrength');
        const strengthBar = strength ? strength.querySelector('div') : null;
        const policy = document.getElementById('pwPolicy');
        function evaluatePassword(pw) {
            const hasLower = /[a-z]/.test(pw);
            const hasUpper = /[A-Z]/.test(pw);
            const hasDigit = /\d/.test(pw);
            const hasLen = typeof pw === 'string' && pw.length >= 6;
            let score = 0; if (hasLen) score++; if (hasLower) score++; if (hasUpper) score++; if (hasDigit) score++;
            return { hasLower, hasUpper, hasDigit, hasLen, score };
        }
        function updateStrengthUI(meta) {
            if (!strength || !strengthBar || !policy) return;
            policy.querySelector('[data-rule="len"]').classList.toggle('ok', meta.hasLen);
            policy.querySelector('[data-rule="lower"]').classList.toggle('ok', meta.hasLower);
            policy.querySelector('[data-rule="upper"]').classList.toggle('ok', meta.hasUpper);
            policy.querySelector('[data-rule="digit"]').classList.toggle('ok', meta.hasDigit);
            const pct = [0,25,50,75,100][meta.score];
            strengthBar.style.width = pct + '%';
            strength.classList.remove('low','medium','good','strong');
            strength.classList.add(meta.score <= 1 ? 'low' : meta.score === 2 ? 'medium' : meta.score === 3 ? 'good' : 'strong');
        }
        if (pwInput) {
            pwInput.addEventListener('input', function(){ updateStrengthUI(evaluatePassword(pwInput.value)); });
            updateStrengthUI(evaluatePassword(pwInput.value || ''));
        }
    })();
</script>
