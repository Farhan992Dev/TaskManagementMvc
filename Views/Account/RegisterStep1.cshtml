@model TaskManagementMvc.Controllers.RegisterStep1ViewModel
@{
    ViewData["Title"] = "ثبت‌نام - مرحله ۱";
}
<style>
    :root { --bg: #f6f7fb; --card: #ffffff; }
    .auth-shell { min-height: 100vh; display: grid; place-items: center; padding: 24px; background: var(--bg); }
    .step-card { width: 100%; max-width: 700px; background: var(--card); border-radius: 16px; box-shadow: 0 6px 24px rgba(0,0,0,.08); overflow: hidden; }
    .step-header { padding: 16px 20px; background: #0d6efd; color: #fff; display: flex; align-items: center; gap: .5rem; }
    .step-header .title { font-size: 1.1rem; margin: 0; }
    .stepper { display: flex; justify-content: space-between; gap: 12px; padding: 16px 20px; background: #f0f4ff; }
    .stepper .node { flex: 1 1 0; display: flex; align-items: center; gap: 10px; opacity: .6; font-weight: 500; }
    .stepper .node.active { opacity: 1; }
    .stepper .dot { width: 28px; height: 28px; border-radius: 50%; background: #dbe5ff; color: #0d6efd; display: grid; place-items: center; font-weight: 700; }
    .stepper .node.active .dot { background: #0d6efd; color: #fff; }
    .step-body { padding: 20px; }
    .actions { display: flex; gap: 10px; justify-content: space-between; padding: 16px 20px; border-top: 1px solid #eee; background: #fafbff; }
    .actions .left, .actions .right { display: flex; gap: 10px; }
    .brand { text-align: center; color: #6c757d; margin-top: 10px; font-size: .9rem; }
</style>

<div class="auth-shell">
    <div class="step-card">
        <div class="step-header">
            <i class="bi bi-person-plus fs-5"></i>
            <h1 class="title">ثبت‌نام</h1>
        </div>

        <div class="stepper">
            <div class="node active">
                <div class="dot">۱</div>
                <div>ایمیل</div>
            </div>
            <div class="node">
                <div class="dot">۲</div>
                <div>رمز عبور</div>
            </div>
            <div class="node">
                <div class="dot">۳</div>
                <div>شرکت</div>
            </div>
        </div>

        <form id="registerStep1Form" asp-action="RegisterStep1" method="post" novalidate>
            @Html.AntiForgeryToken()
            <div class="step-body">
                <div asp-validation-summary="ModelOnly" class="text-danger small mb-2"></div>
                <div class="row g-3">
                    <div class="col-12 col-md-8 mx-auto">
                        <div class="corp-field mb-0">
                            <label asp-for="Email" class="form-label corp-label"></label>
                            <div class="corp-input-group">
                                <span class="corp-input-icon"><i class="bi bi-envelope"></i></span>
                                <input asp-for="Email" class="form-control corp-input" id="Email" autofocus />
                            </div>
                            <span asp-validation-for="Email" class="text-danger corp-validation"></span>
                            <div id="emailFeedback" class="small mt-1"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="actions">
                <div class="left">
                    <a class="btn btn-outline-secondary" asp-action="Login"><i class="bi bi-box-arrow-in-right ms-1"></i> ورود</a>
                </div>
                <div class="right">
                    <button type="submit" class="btn btn-primary">ادامه</button>
                </div>
            </div>
        </form>
    </div>
    <div class="brand">© <span id="year"></span> TaskManagement</div>
    
</div>

@await Html.PartialAsync("_ValidationScriptsPartial")
<script>
    (function(){
        const year = document.getElementById('year'); if (year) year.textContent = new Date().getFullYear();
        const emailInput = document.getElementById('Email');
        const emailFeedback = document.getElementById('emailFeedback');
        const checkEmailUrl = '@Url.Action("CheckEmail","Account")';
        
        let emailTimer = null;
        function setEmailFeedback(state) {
            if (!emailFeedback) return;
            emailFeedback.textContent = state.message || '';
            emailFeedback.className = 'small mt-1 ' + (state.valid ? 'text-success' : state.message ? 'text-danger' : 'text-muted');
        }
        async function checkEmailNow(val) {
            setEmailFeedback({ message: 'در حال بررسی...', valid: false });
            try {
                const url = new URL(checkEmailUrl, window.location.origin);
                url.searchParams.set('email', val);
                const res = await fetch(url, { credentials: 'same-origin' });
                const data = await res.json();
                if (data && data.valid === true) setEmailFeedback({ message: 'ایمیل در دسترس است.', valid: true });
                else setEmailFeedback({ message: (data && data.message) || 'ایمیل قابل استفاده نیست.', valid: false });
            } catch { setEmailFeedback({ message: '', valid: false }); }
        }
        function scheduleEmailCheck() {
            const val = emailInput.value.trim();
            if (!val) { setEmailFeedback({ message: '', valid: false }); return; }
            clearTimeout(emailTimer);
            emailTimer = setTimeout(() => checkEmailNow(val), 450);
        }
        if (emailInput) {
            emailInput.addEventListener('input', scheduleEmailCheck);
            emailInput.addEventListener('blur', scheduleEmailCheck);
        }
    })();
</script>
