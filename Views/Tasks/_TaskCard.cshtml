@model TaskManagementMvc.Models.TaskItem

<style>
.task-card {
    background: white;
    border-radius: 12px;
    margin-bottom: 12px;
    border: 1px solid #e9ecef;
    position: relative;
    cursor: move;
    transition: all 0.2s ease;
    overflow: hidden;
}

.task-card:hover {
    box-shadow: 0 4px 16px rgba(0,0,0,0.1);
    transform: translateY(-1px);
}

.task-card.dragging {
    opacity: 0.5;
    transform: rotate(5deg);
}

.task-priority-stripe {
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 4px;
}

.priority-low { background: #28a745; }
.priority-medium { background: #ffc107; }
.priority-high { background: #fd7e14; }
.priority-critical { background: #dc3545; }

.task-header {
    padding: 16px 16px 8px 16px;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
}

.task-id {
    color: #6c757d;
    font-size: 12px;
    font-weight: 500;
}

.task-menu {
    position: relative;
}

/* Removed three-dots menu button styles */

/* Removed dropdown styles */

@@keyframes dropdownSlide {
    from {
        opacity: 0;
        transform: translateY(-8px) scale(0.95);
    }
    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

.task-dropdown.show {
    display: block;
}

.dropdown-item {
    display: flex;
    align-items: center;
    width: 100%;
    padding: 12px 16px;
    color: #374151;
    text-decoration: none;
    border: none;
    background: none;
    text-align: right;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.15s ease;
    gap: 8px;
}

.dropdown-item i {
    font-size: 16px;
    width: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.dropdown-item:hover {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    color: #1e293b;
    padding-right: 20px;
}

.dropdown-item.text-danger {
    color: #dc2626;
}

.dropdown-item.text-danger:hover {
    background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
    color: #b91c1c;
    padding-right: 20px;
}

.dropdown-item.text-danger i {
    color: #dc2626;
}

.task-title {
    font-size: 16px;
    font-weight: 600;
    color: #1a1a1a;
    margin: 8px 16px;
    line-height: 1.4;
}

.task-labels {
    padding: 0 16px 8px 16px;
    display: flex;
    gap: 6px;
    flex-wrap: wrap;
}

.task-label {
    background: #e3f2fd;
    color: #1565c0;
    font-size: 11px;
    font-weight: 500;
    padding: 4px 8px;
    border-radius: 12px;
    text-transform: uppercase;
}

.task-progress {
    padding: 8px 16px;
}

.progress-bar-custom {
    height: 6px;
    background: #e9ecef;
    border-radius: 3px;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #28a745 0%, #20c997 100%);
    border-radius: 3px;
    transition: width 0.3s ease;
}

.task-footer {
    padding: 12px 16px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #f8f9fa;
    border-top: 1px solid #e9ecef;
}

.task-stats {
    display: flex;
    gap: 8px;
    font-size: 11px;
    color: #6c757d;
    flex-wrap: wrap;
}

.stat-item {
    display: flex;
    align-items: center;
    gap: 3px;
    white-space: nowrap;
    background: rgba(108, 117, 125, 0.08);
    padding: 4px 6px;
    border-radius: 6px;
    transition: all 0.2s ease;
}

.stat-item:hover {
    background: rgba(108, 117, 125, 0.15);
    transform: translateY(-1px);
}

.stat-item-warning {
    background: rgba(220, 53, 69, 0.1) !important;
    color: #dc3545 !important;
    border: 1px solid rgba(220, 53, 69, 0.2);
}

.stat-item-warning:hover {
    background: rgba(220, 53, 69, 0.2) !important;
    transform: translateY(-1px);
}

.stat-item-warning i {
    color: #dc3545 !important;
}

.stat-item i {
    font-size: 11px;
    width: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.performer-name {
    max-width: 80px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.task-sp {
    font-size: 14px;
    font-weight: 600;
    color: #495057;
}
</style>

@{
    var priorityClass = Model.Priority switch
    {
        TaskManagementMvc.Models.TaskPriority.Low => "priority-low",
        TaskManagementMvc.Models.TaskPriority.Medium => "priority-medium", 
        TaskManagementMvc.Models.TaskPriority.High => "priority-high",
        TaskManagementMvc.Models.TaskPriority.Critical => "priority-critical",
        _ => "priority-medium"
    };
    
    var progressPercentage = Model.Status switch
    {
        TaskManagementMvc.Models.TaskStatus.NotStarted => 0,
        TaskManagementMvc.Models.TaskStatus.InProgress => 50,
        TaskManagementMvc.Models.TaskStatus.Completed => 100,
        _ => 0
    };
}

<div class="task-card" draggable="true" 
     data-task-id="@Model.Id" 
     data-performer-id="@(Model.PerformerId?.ToString() ?? "")" 
     data-hours="@Model.Hours.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)"
     title="دبل کلیک برای ویرایش">
    <div class="task-priority-stripe @priorityClass"></div>
    
    <div class="task-header">
        <span class="task-id">#@Model.Id</span>
        <div class="d-flex align-items-center gap-1">
            <button class="btn btn-sm btn-outline-secondary" title="مشاهده" onclick="viewTask(@Model.Id)"><i class="bi bi-eye"></i></button>
            <button class="btn btn-sm btn-outline-primary" title="ویرایش" onclick="editTask(@Model.Id)"><i class="bi bi-pencil"></i></button>
            <button class="btn btn-sm btn-outline-danger" title="حذف" onclick="deleteTask(@Model.Id)"><i class="bi bi-trash"></i></button>
        </div>
    </div>
    
    <div class="task-title">@Model.Title</div>
    
    <div class="task-labels">
        <span class="task-label">@Model.Priority.ToString().ToUpper()</span>
    </div>
    
    <div class="task-progress">
        <div class="progress-bar-custom">
            <div class="progress-fill" style="width: @progressPercentage%"></div>
        </div>
    </div>
    
    <div class="task-footer">
        <div class="task-stats">
            @{
                var isCompletedWithoutHours = Model.Status == TaskManagementMvc.Models.TaskStatus.Completed && Model.Hours == 0;
                var hoursClass = isCompletedWithoutHours ? "stat-item stat-item-warning" : "stat-item";
            }
            <div class="@hoursClass stat-item-hours" data-task-id="@Model.Id">
                <i class="bi bi-hourglass-split"></i>
                <span class="hours-display" title="ساعت‌های ثبت شده" onclick="beginEditHours(@Model.Id); event.stopPropagation();" style="cursor: pointer;">@(Model.Hours.ToString("0.#")) ساعت</span>
                <button type="button" class="btn btn-link btn-sm p-0 ms-1" title="ویرایش ساعت" onclick="beginEditHours(@Model.Id); event.stopPropagation();"><i class="bi bi-pencil-square"></i></button>
            </div>
            <div class="stat-item stat-item-performer" data-task-id="@Model.Id" data-performer-id="@(Model.PerformerId?.ToString() ?? "")">
                <i class="bi bi-person-check"></i>
                <span class="performer-name" title="انجام‌دهنده: @(Model.Performer?.FullName ?? "تعیین نشده")" onclick="beginAssignPerformer(@Model.Id); event.stopPropagation();" style="cursor: pointer;">@(Model.Performer?.FullName ?? "تعیین نشده")</span>
                @{ var qaPerformers = ViewData["ModalPerformers"] as IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>; }
                @if (qaPerformers != null)
                {
                    <button type="button" class="btn btn-link btn-sm p-0 ms-1" title="تخصیص انجام‌دهنده" onclick="beginAssignPerformer(@Model.Id); event.stopPropagation();"><i class="bi bi-pencil-square"></i></button>
                    <select class="form-select form-select-sm d-none inline-performer-select" onchange="submitAssignPerformer(@Model.Id, this.value); event.stopPropagation();">
                        <option value="">بدون انجام‌دهنده</option>
                        @foreach (var it in qaPerformers)
                        {
                            <option value="@it.Value" selected="@(it.Value == (Model.PerformerId?.ToString() ?? ""))">@it.Text</option>
                        }
                    </select>
                }
            </div>
        </div>
        
    </div>
</div>

<script>
async function deleteTask(id) {
    if (!confirm('آیا از حذف این تسک اطمینان دارید؟')) return;
    
    try {
        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
        const formData = new FormData();
        formData.append('id', id);
        
        const response = await fetch('@Url.Action("Delete", "Tasks")', {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                ...(token ? { 'RequestVerificationToken': token } : {})
            },
            body: formData
        });
        
        if (response.ok) {
            let ok = true;
            try {
                const json = await response.json();
                ok = json?.success === true;
            } catch {}

            if (ok) {
                const card = document.querySelector(`[data-task-id="${id}"]`);
                if (card) {
                    card.style.transition = 'all 0.3s ease';
                    card.style.transform = 'scale(0)';
                    card.style.opacity = '0';
                    setTimeout(() => card.remove(), 300);
                }
                showNotification('تسک حذف شد', 'success');
                // Refresh board counters and hours after DOM change
                if (typeof refreshKanbanBoard === 'function') {
                    await refreshKanbanBoard();
                }
            } else {
                throw new Error('Delete failed');
            }
        } else {
            throw new Error('Failed to delete');
        }
    } catch (error) {
        showNotification('خطا در حذف تسک', 'error');
    }
}

function viewTask(id) {
    // Navigate to task details page
    window.location.href = `@Url.Action("Details", "Tasks")/${id}`;
}
</script>
